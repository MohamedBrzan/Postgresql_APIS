import { db } from "../config/db";
import { User } from "../entities/User";
import { IUserRepository } from "../interfaces/IUserRepository";

export class UserRepository implements IUserRepository {
  /**
   * Register a new user (insert into DB).
   * Assumes `user.id` is auto-generated by the DB.
   */
  async register(user: User): Promise<User> {
    const query = `
      INSERT INTO users (name, email, password, phone)
      VALUES ($1, $2, $3, $4)
      RETURNING *;
    `;
    const values = [user.name, user.email, user.password, user.phone];

    const res = await db.query(query, values);
    // Use static factory to create entity instance from DB result
    return User.fromDBObject(res.rows[0]);
  }

  async login(email: string): Promise<User | null> {
    return this.findByEmail(email); 
  }

  /**
   * Find all users.
   */
  async findAll(): Promise<User[]> {
    const res = await db.query(`SELECT * FROM users`);
    return res.rows.map((row) => User.fromDBObject(row));
  }

  /**
   * Find one user by email.
   * Returns null if not found.
   */
  async findByEmail(email: string): Promise<User | null> {
    const res = await db.query(`SELECT * FROM users WHERE email = $1 LIMIT 1`, [
      email,
    ]);
    if (res.rows.length === 0) return null;
    return User.fromDBObject(res.rows[0]);
  }
}
